@page "/view-transactions"
@using Trackify.TransactionModel
@inject JsonFileService JsonFileService
@inject NavigationManager NavigationManager
@inject ApplicationState ApplicationState

<div class="content">
    <h1>View Transactions</h1>
    <div class="filter-sort">
        <input type="text" placeholder="Search by Title" @bind="SearchText" class="input-field" />
        <select @bind="SelectedType" class="input-field">
            <option value="">All Types</option>
            @foreach (var type in TransactionTypes)
            {
                <option value="@type">@type</option>
            }
        </select>
        <input type="date" @bind="StartDate" class="input-field" />
        <input type="date" @bind="EndDate" class="input-field" />
        <input type="text" placeholder="Search by Tags" @bind="TagsText" class="input-field" />
        <button @onclick="SortByDate" class="btn-sort">Sort by Date</button>
    </div>
    <table class="transaction-table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Type</th>
                <th>Tags</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in FilteredTransactions)
            {
                <tr>
                    <td>@transaction.Title</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.Date.ToShortDateString()</td>
                    <td>@transaction.TransactionType.ToString()</td>
                    <td>@string.Join(", ", transaction.Tags)</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
    /* Content Layout */
    .content {
        padding: 30px;
        background-color: #f5f5f5;
        min-height: 100vh;
    }

        .content h1 {
            font-size: 24px;
            margin-bottom: 20px;
        }

    .filter-sort {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 20px;
    }

    .input-field {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 14px;
        outline: none;
        background-color: #dbe6e6;
    }

    .btn-sort {
        background-color: #76989c;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-sort:hover {
            background-color: #5e7a7e;
        }

    .transaction-table {
        width: 100%;
        border-collapse: collapse;
    }

        .transaction-table th, .transaction-table td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: left;
        }
</style>

@code {
    private List<TransactionModel> TransactionsList = new List<TransactionModel>();
    private string SearchText = string.Empty;
    private TransactionType? SelectedType;
    private DateTime? StartDate;
    private DateTime? EndDate;
    private string TagsText = string.Empty;
    private List<TransactionType> TransactionTypes => TransactionsList.Select(t => t.TransactionType).Distinct().ToList();

    private List<TransactionModel> FilteredTransactions => TransactionsList
        .Where(t => (string.IsNullOrEmpty(SearchText) || t.Title.Contains(SearchText, StringComparison.OrdinalIgnoreCase)) &&
                    (!SelectedType.HasValue || t.TransactionType == SelectedType.Value) &&
                    (!StartDate.HasValue || t.Date >= StartDate) &&
                    (!EndDate.HasValue || t.Date <= EndDate) &&
                    (string.IsNullOrEmpty(TagsText) || t.Tags.Any(tag => tag.Contains(TagsText, StringComparison.OrdinalIgnoreCase))))
        .OrderBy(t => t.Date)
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            TransactionsList = await JsonFileService.ReadAsync<TransactionModel>("transactions.json");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions.json: {ex.Message}");
        }
    }

    private void SortByDate()
    {
        TransactionsList = TransactionsList.OrderBy(t => t.Date).ToList();
    }
}
