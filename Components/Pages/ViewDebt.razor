@page "/view-debts"
@using Trackify.Models
@inject JsonFileService JsonFileService
@inject NavigationManager NavigationManager
@inject ApplicationState ApplicationState

<div class="content">
    <h1>View Debts</h1>
    <div class="filter-sort">
        <input type="text" placeholder="Filter by Name or Title" @bind="FilterText" class="input-field" />
        <button @onclick="SortByDate" class="btn-sort">Sort by Date</button>
    </div>
    <table class="debt-table">
        <thead>
            <tr>
                <th>Debt Source</th>
                <th>Amount</th>
                <th>Due Date</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var debt in FilteredDebts)
            {
                <tr>
                    <td>@debt.DebtSource</td>
                    <td>@debt.Amount</td>
                    <td>@debt.DueDate.ToShortDateString()</td>
                    <td>@debt.Status</td>
                    <td>
                        @if (debt.Status == DebtStatus.Pending)
                        {
                            <button @onclick="() => ClearDebt(debt.DebtId)" class="btn-clear">Clear Debt</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
    /* Content Layout */
    .content {
        padding: 30px;
        background-color: #f5f5f5;
        min-height: 100vh;
    }

        .content h1 {
            font-size: 24px;
            margin-bottom: 20px;
        }

    .filter-sort {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .input-field {
        width: 70%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 14px;
        outline: none;
        background-color: #dbe6e6;
    }

    .btn-sort {
        background-color: #76989c;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-sort:hover {
            background-color: #5e7a7e;
        }

    .debt-table {
        width: 100%;
        border-collapse: collapse;
    }

        .debt-table th, .debt-table td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: left;
        }

    .btn-clear {
        background-color: #e74c3c;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 5px 10px;
        font-size: 14px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-clear:hover {
            background-color: #c0392b;
        }
</style>

@code {
    private List<DebtModel> Debts = new List<DebtModel>();
    private List<DebtModel> FilteredDebts => Debts
        .Where(d => string.IsNullOrEmpty(FilterText) || d.DebtSource.Contains(FilterText, StringComparison.OrdinalIgnoreCase) || d.DebtSource.Contains(FilterText, StringComparison.OrdinalIgnoreCase))
        .OrderBy(d => d.DueDate)
        .ToList();
    private string FilterText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Debts = await JsonFileService.ReadAsync<DebtModel>("debts.json");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading debts.json: {ex.Message}");
        }
    }

    private void SortByDate()
    {
        Debts = Debts.OrderBy(d => d.DueDate).ToList();
    }

    private async Task ClearDebt(int debtId)
    {
        var debt = Debts.FirstOrDefault(d => d.DebtId == debtId);
        if (debt != null)
        {
            debt.Status = DebtStatus.Cleared;
            await JsonFileService.WriteAsync("debts.json", Debts);
        }
    }
}