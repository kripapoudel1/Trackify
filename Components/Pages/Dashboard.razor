@page "/dashboard"
@using Trackify.TransactionModel
@inject JsonFileService JsonFileService
@inject NavigationManager NavigationManager
@inject ApplicationState ApplicationState
@using Trackify.Models

<div class="dashboard">
    <h1>Dashboard</h1>

    <!-- Main Metrics -->
    <div class="main-metrics">
        <div class="metric-card">
            <h2>Balance</h2>
            <p class="amount">$@Balance.ToString("N0")</p>
        </div>
        <div class="metric-card">
            <h2>Total Income</h2>
            <p class="amount">$@TotalCashInflow.ToString("N0")</p>
        </div>
        <div class="metric-card">
            <h2>Total Expenses</h2>
            <p class="amount">$@TotalCashOutflow.ToString("N0")</p>
        </div>
    </div>

    <h2 class="section-title">Statistics</h2>
    <div class="statistics-grid">
        <div class="stat-card">
            <h3>Total Inflow</h3>
            <p>@TotalInflow</p>
        </div>
        <div class="stat-card">
            <h3>Total Outflow</h3>
            <p>@TotalOutflow</p>
        </div>
        <div class="stat-card">
            <h3>Total Debts</h3>
            <p>@TotalDebts</p>
        </div>
        <div class="stat-card">
            <h3>Cleared Debts</h3>
            <p>@TotalClearedDebt.ToString("N0")</p>
        </div>
    </div>

    <div class="transactions-grid">
        <div class="transaction-card">
            <h2>Highest Transaction</h2>
            <div class="transaction-details">
                <p>Inflow- @HighestInflow?.Amount.ToString("C0")</p>
                <p>Outflow- @HighestOutflow?.Amount.ToString("C0")</p>
                <p>Debt- @HighestDebt?.Amount.ToString("C0")</p>
            </div>
        </div>
        <div class="transaction-card">
            <h2>Lowest Transaction</h2>
            <div class="transaction-details">
                <p>Inflow- @LowestInflow?.Amount.ToString("C0")</p>
                <p>Outflow- @LowestOutflow?.Amount.ToString("C0")</p>
                <p>Debt- @LowestDebt?.Amount.ToString("C0")</p>
            </div>
        </div>
    </div>

    <div class="bottom-grid">
        <div class="info-card">
            <h2>Pending Debts</h2>
            @foreach (var debt in PendingDebts)
            {
                <p>@debt.DebtSource: @debt.DueDate.ToString("yyyy-MM-dd") $@debt.Amount</p>
            }
        </div>
         @* <div class="info-card">
             <h2>Transaction by Tags</h2>
             @foreach (var tag in TransactionTags)
             {
                 <p>@tag.Key: @tag.Value Transactions</p>
             }
         </div> *@
    </div>
</div>

<style>
    .dashboard {
        padding: 2rem;
        background-color: #f8f9fa;
        min-height: 100vh;
    }

    h1 {
        font-size: 2rem;
        margin-bottom: 2rem;
        color: #333;
    }

    .section-title {
        font-size: 1.5rem;
        margin: 2rem 0 1rem;
        color: #333;
    }

    .main-metrics {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .metric-card {
        background-color: #e9ecef;
        padding: 1.5rem;
        border-radius: 0.5rem;
        text-align: left;
    }

        .metric-card h2 {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
            color: #333;
        }

    .amount {
        font-size: 1.5rem;
        font-weight: bold;
        color: #333;
    }

    .statistics-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background-color: #e9ecef;
        padding: 1rem;
        border-radius: 0.5rem;
        text-align: center;
    }

        .stat-card h3 {
            font-size: 1rem;
            margin-bottom: 0.5rem;
            color: #333;
        }

    .transactions-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .transaction-card {
        background-color: #e9ecef;
        padding: 1.5rem;
        border-radius: 0.5rem;
    }

    .transaction-details {
        margin-top: 1rem;
    }

        .transaction-details p {
            margin: 0.5rem 0;
            color: #555;
        }

    .bottom-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
    }

    .info-card {
        background-color: #e9ecef;
        padding: 1.5rem;
        border-radius: 0.5rem;
    }

        .info-card h2 {
            margin-bottom: 1rem;
            font-size: 1.25rem;
            color: #333;
        }

        .info-card p {
            margin: 0.5rem 0;
            color: #555;
        }
</style>

@code {
    private List<TransactionModel> Transactions = new List<TransactionModel>();
    private List<DebtModel> Debts = new List<DebtModel>();

    private decimal Balance => TotalCashInflow - TotalCashOutflow;
    private decimal TotalCashInflow => Transactions.Where(t => t.TransactionType == TransactionType.Credit).Sum(t => t.Amount);
    private decimal TotalCashOutflow => Transactions.Where(t => t.TransactionType == TransactionType.Debit).Sum(t => t.Amount);
    private int TotalInflow => Transactions.Count(t => t.TransactionType == TransactionType.Credit);
    private int TotalOutflow => Transactions.Count(t => t.TransactionType == TransactionType.Debit);
    private int TotalDebts => Debts.Count;

    private decimal TotalClearedDebt => Debts
        .Where(d => d.Status == DebtStatus.Cleared)
        .Sum(d => d.Amount);

    private TransactionModel? HighestInflow => Transactions
        .Where(t => t.TransactionType == TransactionType.Credit)
        .OrderByDescending(t => t.Amount)
        .FirstOrDefault();

    private TransactionModel? HighestOutflow => Transactions
        .Where(t => t.TransactionType == TransactionType.Debit)
        .OrderByDescending(t => t.Amount)
        .FirstOrDefault();

    private DebtModel? HighestDebt => Debts
        .OrderByDescending(d => d.Amount)
        .FirstOrDefault();

    private TransactionModel? LowestInflow => Transactions
        .Where(t => t.TransactionType == TransactionType.Credit)
        .OrderBy(t => t.Amount)
        .FirstOrDefault();

    private TransactionModel? LowestOutflow => Transactions
        .Where(t => t.TransactionType == TransactionType.Debit)
        .OrderBy(t => t.Amount)
        .FirstOrDefault();

    private DebtModel? LowestDebt => Debts
        .OrderBy(d => d.Amount)
        .FirstOrDefault();

    private List<DebtModel> PendingDebts => Debts
        .Where(d => d.Status == DebtStatus.Pending)
        .OrderByDescending(d => d.DueDate)
        .Take(5)
        .ToList();

    // private Dictionary<string, int> TransactionTags => Transactions
    //     .GroupBy(t => t.Tag)
    //     .ToDictionary(g => g.Key, g => g.Count());

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Transactions = await JsonFileService.ReadAsync<TransactionModel>("transactions.json");
            Debts = await JsonFileService.ReadAsync<DebtModel>("debts.json");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }
}
